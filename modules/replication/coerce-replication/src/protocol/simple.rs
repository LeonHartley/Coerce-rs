// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 3.13.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `simple.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RemoteRead)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemoteRead {
    // message fields
    // @@protoc_insertion_point(field:RemoteRead.request_id)
    pub request_id: ::std::string::String,
    // @@protoc_insertion_point(field:RemoteRead.source_node_id)
    pub source_node_id: u64,
    // @@protoc_insertion_point(field:RemoteRead.key)
    pub key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:RemoteRead.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoteRead {
    fn default() -> &'a RemoteRead {
        <RemoteRead as ::protobuf::Message>::default_instance()
    }
}

impl RemoteRead {
    pub fn new() -> RemoteRead {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_id",
            |m: &RemoteRead| { &m.request_id },
            |m: &mut RemoteRead| { &mut m.request_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_node_id",
            |m: &RemoteRead| { &m.source_node_id },
            |m: &mut RemoteRead| { &mut m.source_node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &RemoteRead| { &m.key },
            |m: &mut RemoteRead| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteRead>(
            "RemoteRead",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoteRead {
    const NAME: &'static str = "RemoteRead";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request_id = is.read_string()?;
                },
                16 => {
                    self.source_node_id = is.read_uint64()?;
                },
                26 => {
                    self.key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if self.source_node_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.source_node_id);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if self.source_node_id != 0 {
            os.write_uint64(2, self.source_node_id)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(3, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoteRead {
        RemoteRead::new()
    }

    fn clear(&mut self) {
        self.request_id.clear();
        self.source_node_id = 0;
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoteRead {
        static instance: RemoteRead = RemoteRead {
            request_id: ::std::string::String::new(),
            source_node_id: 0,
            key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoteRead {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoteRead").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoteRead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteRead {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Error)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Error {
    // message fields
    // @@protoc_insertion_point(field:Error.error_type)
    pub error_type: ::protobuf::EnumOrUnknown<ErrorType>,
    // @@protoc_insertion_point(field:Error.storage_err)
    pub storage_err: ::protobuf::EnumOrUnknown<StorageError>,
    // special fields
    // @@protoc_insertion_point(special_field:Error.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error_type",
            |m: &Error| { &m.error_type },
            |m: &mut Error| { &mut m.error_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "storage_err",
            |m: &Error| { &m.storage_err },
            |m: &mut Error| { &mut m.storage_err },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Error>(
            "Error",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Error {
    const NAME: &'static str = "Error";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.storage_err = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error_type != ::protobuf::EnumOrUnknown::new(ErrorType::NOT_READY) {
            my_size += ::protobuf::rt::int32_size(1, self.error_type.value());
        }
        if self.storage_err != ::protobuf::EnumOrUnknown::new(StorageError::NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.storage_err.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error_type != ::protobuf::EnumOrUnknown::new(ErrorType::NOT_READY) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.error_type))?;
        }
        if self.storage_err != ::protobuf::EnumOrUnknown::new(StorageError::NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.storage_err))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Error {
        Error::new()
    }

    fn clear(&mut self) {
        self.error_type = ::protobuf::EnumOrUnknown::new(ErrorType::NOT_READY);
        self.storage_err = ::protobuf::EnumOrUnknown::new(StorageError::NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Error {
        static instance: Error = Error {
            error_type: ::protobuf::EnumOrUnknown::from_i32(0),
            storage_err: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Error {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Error").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RemoteReadResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemoteReadResult {
    // message oneof groups
    pub result: ::std::option::Option<remote_read_result::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:RemoteReadResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoteReadResult {
    fn default() -> &'a RemoteReadResult {
        <RemoteReadResult as ::protobuf::Message>::default_instance()
    }
}

impl RemoteReadResult {
    pub fn new() -> RemoteReadResult {
        ::std::default::Default::default()
    }

    // bytes value = 1;

    pub fn value(&self) -> &[u8] {
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Value(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.result = ::std::option::Option::Some(remote_read_result::Result::Value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(remote_read_result::Result::Value(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(remote_read_result::Result::Value(::std::vec::Vec::new()));
        }
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_value() {
            match self.result.take() {
                ::std::option::Option::Some(remote_read_result::Result::Value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .Error error = 2;

    pub fn error(&self) -> &Error {
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Error(ref v)) => v,
            _ => <Error as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.result = ::std::option::Option::Some(remote_read_result::Result::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut Error {
        if let ::std::option::Option::Some(remote_read_result::Result::Error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(remote_read_result::Result::Error(Error::new()));
        }
        match self.result {
            ::std::option::Option::Some(remote_read_result::Result::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(remote_read_result::Result::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            Error::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "value",
            RemoteReadResult::has_value,
            RemoteReadResult::value,
            RemoteReadResult::set_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Error>(
            "error",
            RemoteReadResult::has_error,
            RemoteReadResult::error,
            RemoteReadResult::mut_error,
            RemoteReadResult::set_error,
        ));
        oneofs.push(remote_read_result::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteReadResult>(
            "RemoteReadResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoteReadResult {
    const NAME: &'static str = "RemoteReadResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = ::std::option::Option::Some(remote_read_result::Result::Value(is.read_bytes()?));
                },
                18 => {
                    self.result = ::std::option::Option::Some(remote_read_result::Result::Error(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &remote_read_result::Result::Value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &remote_read_result::Result::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &remote_read_result::Result::Value(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &remote_read_result::Result::Error(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoteReadResult {
        RemoteReadResult::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoteReadResult {
        static instance: RemoteReadResult = RemoteReadResult {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoteReadResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoteReadResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoteReadResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteReadResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RemoteReadResult`
pub mod remote_read_result {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RemoteReadResult.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:RemoteReadResult.value)
        Value(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:RemoteReadResult.error)
        Error(super::Error),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RemoteReadResult as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

// @@protoc_insertion_point(message:Heartbeat)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Heartbeat {
    // message fields
    // @@protoc_insertion_point(field:Heartbeat.source_node_id)
    pub source_node_id: u64,
    // @@protoc_insertion_point(field:Heartbeat.last_commit_index)
    pub last_commit_index: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::UInt64Value>,
    // @@protoc_insertion_point(field:Heartbeat.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:Heartbeat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Heartbeat {
    fn default() -> &'a Heartbeat {
        <Heartbeat as ::protobuf::Message>::default_instance()
    }
}

impl Heartbeat {
    pub fn new() -> Heartbeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_node_id",
            |m: &Heartbeat| { &m.source_node_id },
            |m: &mut Heartbeat| { &mut m.source_node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::UInt64Value>(
            "last_commit_index",
            |m: &Heartbeat| { &m.last_commit_index },
            |m: &mut Heartbeat| { &mut m.last_commit_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Heartbeat| { &m.timestamp },
            |m: &mut Heartbeat| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Heartbeat>(
            "Heartbeat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Heartbeat {
    const NAME: &'static str = "Heartbeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.source_node_id = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_commit_index)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.source_node_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.source_node_id);
        }
        if let Some(v) = self.last_commit_index.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.source_node_id != 0 {
            os.write_uint64(1, self.source_node_id)?;
        }
        if let Some(v) = self.last_commit_index.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Heartbeat {
        Heartbeat::new()
    }

    fn clear(&mut self) {
        self.source_node_id = 0;
        self.last_commit_index.clear();
        self.timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Heartbeat {
        static instance: Heartbeat = Heartbeat {
            source_node_id: 0,
            last_commit_index: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Heartbeat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Heartbeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Heartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Heartbeat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ErrorType)
pub enum ErrorType {
    // @@protoc_insertion_point(enum_value:ErrorType.NOT_READY)
    NOT_READY = 0,
    // @@protoc_insertion_point(enum_value:ErrorType.STORAGE)
    STORAGE = 1,
}

impl ::protobuf::Enum for ErrorType {
    const NAME: &'static str = "ErrorType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorType> {
        match value {
            0 => ::std::option::Option::Some(ErrorType::NOT_READY),
            1 => ::std::option::Option::Some(ErrorType::STORAGE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ErrorType> {
        match str {
            "NOT_READY" => ::std::option::Option::Some(ErrorType::NOT_READY),
            "STORAGE" => ::std::option::Option::Some(ErrorType::STORAGE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ErrorType] = &[
        ErrorType::NOT_READY,
        ErrorType::STORAGE,
    ];
}

impl ::protobuf::EnumFull for ErrorType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ErrorType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ErrorType {
    fn default() -> Self {
        ErrorType::NOT_READY
    }
}

impl ErrorType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ErrorType>("ErrorType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:StorageError)
pub enum StorageError {
    // @@protoc_insertion_point(enum_value:StorageError.NONE)
    NONE = 0,
}

impl ::protobuf::Enum for StorageError {
    const NAME: &'static str = "StorageError";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StorageError> {
        match value {
            0 => ::std::option::Option::Some(StorageError::NONE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<StorageError> {
        match str {
            "NONE" => ::std::option::Option::Some(StorageError::NONE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [StorageError] = &[
        StorageError::NONE,
    ];
}

impl ::protobuf::EnumFull for StorageError {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("StorageError").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for StorageError {
    fn default() -> Self {
        StorageError::NONE
    }
}

impl StorageError {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StorageError>("StorageError")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0csimple.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/\
    protobuf/wrappers.proto\"c\n\nRemoteRead\x12\x1d\n\nrequest_id\x18\x01\
    \x20\x01(\tR\trequestId\x12$\n\x0esource_node_id\x18\x02\x20\x01(\x04R\
    \x0csourceNodeId\x12\x10\n\x03key\x18\x03\x20\x01(\x0cR\x03key\"b\n\x05E\
    rror\x12)\n\nerror_type\x18\x01\x20\x01(\x0e2\n.ErrorTypeR\terrorType\
    \x12.\n\x0bstorage_err\x18\x02\x20\x01(\x0e2\r.StorageErrorR\nstorageErr\
    \"T\n\x10RemoteReadResult\x12\x16\n\x05value\x18\x01\x20\x01(\x0cH\0R\
    \x05value\x12\x1e\n\x05error\x18\x02\x20\x01(\x0b2\x06.ErrorH\0R\x05erro\
    rB\x08\n\x06result\"\xb5\x01\n\tHeartbeat\x12$\n\x0esource_node_id\x18\
    \x01\x20\x01(\x04R\x0csourceNodeId\x12H\n\x11last_commit_index\x18\x02\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt64ValueR\x0flastCommitIndex\x128\
    \n\ttimestamp\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttime\
    stamp*'\n\tErrorType\x12\r\n\tNOT_READY\x10\0\x12\x0b\n\x07STORAGE\x10\
    \x01*\x18\n\x0cStorageError\x12\x08\n\x04NONE\x10\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(RemoteRead::generated_message_descriptor_data());
            messages.push(Error::generated_message_descriptor_data());
            messages.push(RemoteReadResult::generated_message_descriptor_data());
            messages.push(Heartbeat::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ErrorType::generated_enum_descriptor_data());
            enums.push(StorageError::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
