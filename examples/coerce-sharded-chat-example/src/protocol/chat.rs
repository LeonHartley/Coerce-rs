// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `chat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coerce.example.sharding.chat.Handshake)
pub struct Handshake {
    // message fields
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.Handshake.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:coerce.example.sharding.chat.Handshake.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Handshake {
    fn default() -> &'a Handshake {
        <Handshake as ::protobuf::Message>::default_instance()
    }
}

impl Handshake {
    pub fn new() -> Handshake {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Handshake| { &m.name },
            |m: &mut Handshake| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Handshake>(
            "Handshake",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Handshake {
    const NAME: &'static str = "Handshake";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Handshake {
        Handshake::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Handshake {
        static instance: Handshake = Handshake {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Handshake {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Handshake").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Handshake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handshake {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coerce.example.sharding.chat.JoinChat)
pub struct JoinChat {
    // message fields
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.JoinChat.chat_stream_id)
    pub chat_stream_id: ::std::string::String,
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.JoinChat.join_token)
    pub join_token: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // special fields
    // @@protoc_insertion_point(special_field:coerce.example.sharding.chat.JoinChat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JoinChat {
    fn default() -> &'a JoinChat {
        <JoinChat as ::protobuf::Message>::default_instance()
    }
}

impl JoinChat {
    pub fn new() -> JoinChat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chat_stream_id",
            |m: &JoinChat| { &m.chat_stream_id },
            |m: &mut JoinChat| { &mut m.chat_stream_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "join_token",
            |m: &JoinChat| { &m.join_token },
            |m: &mut JoinChat| { &mut m.join_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JoinChat>(
            "JoinChat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JoinChat {
    const NAME: &'static str = "JoinChat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chat_stream_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.join_token)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.chat_stream_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chat_stream_id);
        }
        if let Some(v) = self.join_token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.chat_stream_id.is_empty() {
            os.write_string(1, &self.chat_stream_id)?;
        }
        if let Some(v) = self.join_token.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JoinChat {
        JoinChat::new()
    }

    fn clear(&mut self) {
        self.chat_stream_id.clear();
        self.join_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JoinChat {
        static instance: JoinChat = JoinChat {
            chat_stream_id: ::std::string::String::new(),
            join_token: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JoinChat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JoinChat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JoinChat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinChat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coerce.example.sharding.chat.LeaveChat)
pub struct LeaveChat {
    // message fields
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.LeaveChat.chat_stream_id)
    pub chat_stream_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:coerce.example.sharding.chat.LeaveChat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaveChat {
    fn default() -> &'a LeaveChat {
        <LeaveChat as ::protobuf::Message>::default_instance()
    }
}

impl LeaveChat {
    pub fn new() -> LeaveChat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chat_stream_id",
            |m: &LeaveChat| { &m.chat_stream_id },
            |m: &mut LeaveChat| { &mut m.chat_stream_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaveChat>(
            "LeaveChat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaveChat {
    const NAME: &'static str = "LeaveChat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chat_stream_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.chat_stream_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chat_stream_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.chat_stream_id.is_empty() {
            os.write_string(1, &self.chat_stream_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaveChat {
        LeaveChat::new()
    }

    fn clear(&mut self) {
        self.chat_stream_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaveChat {
        static instance: LeaveChat = LeaveChat {
            chat_stream_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaveChat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaveChat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaveChat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaveChat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coerce.example.sharding.chat.SendChatMessage)
pub struct SendChatMessage {
    // message fields
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.SendChatMessage.message)
    pub message: ::protobuf::MessageField<ChatMessage>,
    // special fields
    // @@protoc_insertion_point(special_field:coerce.example.sharding.chat.SendChatMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendChatMessage {
    fn default() -> &'a SendChatMessage {
        <SendChatMessage as ::protobuf::Message>::default_instance()
    }
}

impl SendChatMessage {
    pub fn new() -> SendChatMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ChatMessage>(
            "message",
            |m: &SendChatMessage| { &m.message },
            |m: &mut SendChatMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendChatMessage>(
            "SendChatMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendChatMessage {
    const NAME: &'static str = "SendChatMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendChatMessage {
        SendChatMessage::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendChatMessage {
        static instance: SendChatMessage = SendChatMessage {
            message: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendChatMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendChatMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendChatMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendChatMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coerce.example.sharding.chat.ChatMessage)
pub struct ChatMessage {
    // message fields
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.ChatMessage.chat_stream_id)
    pub chat_stream_id: ::std::string::String,
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.ChatMessage.message_id)
    pub message_id: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::UInt64Value>,
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.ChatMessage.sender)
    pub sender: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:coerce.example.sharding.chat.ChatMessage.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:coerce.example.sharding.chat.ChatMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChatMessage {
    fn default() -> &'a ChatMessage {
        <ChatMessage as ::protobuf::Message>::default_instance()
    }
}

impl ChatMessage {
    pub fn new() -> ChatMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chat_stream_id",
            |m: &ChatMessage| { &m.chat_stream_id },
            |m: &mut ChatMessage| { &mut m.chat_stream_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::UInt64Value>(
            "message_id",
            |m: &ChatMessage| { &m.message_id },
            |m: &mut ChatMessage| { &mut m.message_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sender",
            |m: &ChatMessage| { &m.sender },
            |m: &mut ChatMessage| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ChatMessage| { &m.message },
            |m: &mut ChatMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChatMessage>(
            "ChatMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChatMessage {
    const NAME: &'static str = "ChatMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chat_stream_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message_id)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                34 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.chat_stream_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chat_stream_id);
        }
        if let Some(v) = self.message_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.chat_stream_id.is_empty() {
            os.write_string(1, &self.chat_stream_id)?;
        }
        if let Some(v) = self.message_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.message.is_empty() {
            os.write_string(4, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChatMessage {
        ChatMessage::new()
    }

    fn clear(&mut self) {
        self.chat_stream_id.clear();
        self.message_id.clear();
        self.sender.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChatMessage {
        static instance: ChatMessage = ChatMessage {
            chat_stream_id: ::std::string::String::new(),
            message_id: ::protobuf::MessageField::none(),
            sender: ::protobuf::MessageField::none(),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChatMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChatMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChatMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChatMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nchat.proto\x12\x1ccoerce.example.sharding.chat\x1a\x1egoogle/protobu\
    f/wrappers.proto\"\x1f\n\tHandshake\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\"m\n\x08JoinChat\x12$\n\x0echat_stream_id\x18\x01\x20\x01(\tR\
    \x0cchatStreamId\x12;\n\njoin_token\x18\x02\x20\x01(\x0b2\x1c.google.pro\
    tobuf.StringValueR\tjoinToken\"1\n\tLeaveChat\x12$\n\x0echat_stream_id\
    \x18\x01\x20\x01(\tR\x0cchatStreamId\"V\n\x0fSendChatMessage\x12C\n\x07m\
    essage\x18\x01\x20\x01(\x0b2).coerce.example.sharding.chat.ChatMessageR\
    \x07message\"\xc0\x01\n\x0bChatMessage\x12$\n\x0echat_stream_id\x18\x01\
    \x20\x01(\tR\x0cchatStreamId\x12;\n\nmessage_id\x18\x02\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt64ValueR\tmessageId\x124\n\x06sender\x18\x03\
    \x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x06sender\x12\x18\n\x07m\
    essage\x18\x04\x20\x01(\tR\x07messageb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Handshake::generated_message_descriptor_data());
            messages.push(JoinChat::generated_message_descriptor_data());
            messages.push(LeaveChat::generated_message_descriptor_data());
            messages.push(SendChatMessage::generated_message_descriptor_data());
            messages.push(ChatMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
